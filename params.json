{"name":"Phinject","tagline":"PHP Dependency Injection Library","body":"Phinject\r\n========\r\n\r\n[![Build Status](https://travis-ci.org/aztech-digital/phinject.png?branch=master)](https://travis-ci.org/aztech-digital/phinject)\r\n[![Scrutinizer Code Quality](https://img.shields.io/scrutinizer/coverage/g/aztech-digital/phinject.svg?style=flat)](https://scrutinizer-ci.com/g/aztech-digital/phinject/?branch=master)\r\n[![Code Coverage](https://img.shields.io/scrutinizer/g/aztech-digital/phinject.svg?style=flat)](https://scrutinizer-ci.com/g/aztech-digital/phinject/?branch=master)\r\n[![HHVM Support](https://img.shields.io/hhvm/aztech/phinject.svg)](http://hhvm.h4cc.de/package/aztech/phinject)\r\n\r\nPhinject is a simple dependency injection container, with extensible activation & injection strategies.\r\n\r\n## Setup\r\n\r\n[Composer](https://getcomposer.org) is the only supported way of installing Phinject. From the root of your project, run the following command:\r\n\r\n```\r\ncomposer require aztech/phinject\r\n```\r\n\r\n## Features\r\n\r\n- Compatible with the [container-interop](https://github.com/container-interop/container-interop) specification\r\n- Compatible with [delegate containers](https://github.com/container-interop/container-interop/blob/master/docs/Delegate-lookup.md).\r\n- YAML, JSON or PHP based configuration.\r\n- Lazy-loading dependencies.\r\n- Remote proxies (undocumented).\r\n- Aliases (undocumented).\r\n- Extensible configuration syntax (undocumented).\r\n\r\n## Usage\r\n\r\nThe documentation is available [here](./doc/).\r\n\r\nWe have a [getting started](./doc/01-Getting-started.md) guide, followed by more comprehensive documentation (although not yet exhaustive, but that will come):\r\n\r\n- [Injection types](./doc/02-Injection-types.md)\r\n- [References](./doc/03-References.md)\r\n- [Activators](./doc/04-Activators.md) \r\n- [Lifecycle of objects](./doc/05-Lifecycle.md)\r\n- Remote objects (TODO: Write documentation)\r\n- Extending the configuration syntax (TODO: Write documentation)\r\n- Container interoperability (TODO: Write documentation).\r\n\r\n**Note** All the documentation examples are written using a YAML based configuration, however, you can also use JSON or PHP configuration files. (TODO: Document usage of PHP & JSON config file)\r\n\r\n## Credits\r\n\r\nThis library is originally a fork on `oliviermadre/dic-it`, available [here](https://github.com/oliviermadre/dic-it).\r\n\r\nMost of the core features have however been refactored or rewritten, enough that I felt it was time to re-brand this package, in order to both prevent confusion with the original package, and because I did not like the name.\r\n","google":"UA-53268623-7","note":"Don't delete this file! It's used internally to help with page regeneration."}